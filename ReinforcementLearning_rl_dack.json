{"paragraphs":[{"text":"%pyspark \nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import mean_absolute_error\nimport math\n\nusers_url = 'https://drive.google.com/uc?id=1V3_mcIpT8Tw9MT2xMEuoTOYo2x16e40Q&export=download'\nmovies_url = 'https://drive.google.com/uc?id=1wseKfJLJs330TN0VQynoElj_0Q63O9eT&export=download'\nratings_url = 'https://drive.google.com/uc?id=14CThKiJc7u_hmVKCAex4dHmEyx23zVTn&export=download'\nposters_url = 'https://drive.google.com/uc?id=1K_3TBdLzpPmuYeN18KOt8BBFe3IEubP1&export=download'\nlinks_url = 'https://drive.google.com/uc?id=1T_rC_zGjvxuOUfARQsdjIXHvygrbMnNw&export=download'\ndf_users = pd.read_csv(users_url, sep='|', encoding='latin-1', header=None, \n                    names=['user_id', 'age', 'gender', 'occupation', 'zipcode'])\ndf_users['stt'] = df_users['user_id']\ndf_movies = pd.read_csv(movies_url, sep='|', encoding='latin-1', header=None, \n                     names=['movie_id', 'title', 'release_date', 'video_release_date', 'IMDb_URL'] + \n                           [f'genre_{i}' for i in range(19)], usecols=range(24))\ndf_links = pd.read_csv(links_url, encoding='latin-1', header=None, \n                    names=['imdb_id', 'imdb_url'])\ndf_posters = pd.read_csv(posters_url, encoding='latin-1', header=None, \n                    names=['poster_id', 'poster_url'])\ndf_movies['stt'] = df_movies['movie_id']\ndf_ratings = pd.read_csv(ratings_url, sep='\\t', encoding='latin-1', header=None, \n                      names=['user_id', 'movie_id', 'rating', 'timestamp'])\n#Merge them poster url and link\ndf_merged_url = df_movies.merge(df_links[['imdb_id', 'imdb_url']], left_on='movie_id', right_on='imdb_id', how='left')\ndf_merged_poster = df_merged_url.merge(df_posters[['poster_id', 'poster_url']], left_on='movie_id', right_on='poster_id', how='left')\ndf_movies['IMDb_URL'] = df_merged_url['imdb_url'].astype(str).str.zfill(7)\ndf_movies['poster_url'] = df_merged_poster['poster_url']\n\n# Chuyển đổi timestamp thành dạng thời gian\ndf_ratings['timestamp'] = pd.to_datetime(df_ratings['timestamp'], unit='s')\n\nusers = df_users.set_index('stt').to_dict(orient='index')\nmovies = df_movies.set_index('stt').to_dict(orient='index')\nratings = {(row['user_id'], row['movie_id']): row['rating'] for _, row in df_ratings.iterrows()}\n","user":"anonymous","dateUpdated":"2024-11-14T09:48:32+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731548363406_120394094","id":"20241114-083923_889145275","dateCreated":"2024-11-14T08:39:23+0700","dateStarted":"2024-11-14T09:48:32+0700","dateFinished":"2024-11-14T09:48:57+0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1804"},{"text":"%pyspark\nimport csv\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\nrow_names = ['movie_id', 'movie_url']\nwith open('movie_url.csv', 'r', newline='') as in_csv:\n    reader = csv.DictReader(in_csv, fieldnames=row_names, delimiter=',')\n    for row in reader:\n        movie_id = row['movie_id']\n        movie_url = row['movie_url']\n        domain = 'http://www.imdb.com'\n        with urllib.request.urlopen(movie_url) as response:\n            html = response.read()\n            soup = BeautifulSoup(html, 'html.parser')\n            # Get url of poster image\n            try:\n                image_url = soup.find('div', class_='poster').a.img['src']\n                # TODO: Replace hardcoded extension with extension from string itself\n                extension = '.jpg'\n                image_url = ''.join(image_url.partition('_')[0]) + extension\n                filename = 'img/' + movie_id + extension\n                with urllib.request.urlopen(image_url) as response:\n                    with open(filename, 'wb') as out_image:\n                        out_image.write(response.read())\n                    with open('movie_poster.csv', 'a', newline='') as out_csv:\n                        writer = csv.writer(out_csv, delimiter=',')\n                        writer.writerow([movie_id, image_url])\n            # Ignore cases where no poster image is present\n            except AttributeError:\n                pass","user":"anonymous","dateUpdated":"2024-11-14T08:51:50+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1731549099478_1851199046","id":"20241114-085139_1186996389","dateCreated":"2024-11-14T08:51:39+0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:1805"},{"text":"%pyspark\nimport random\n\nclass RSEnv:\n    def __init__(self, users, movies, ratings, all_ratings=[1, 2, 3, 4, 5]):\n        self.users = users\n        self.movies = movies\n        self.ratings = ratings\n        self.state = None\n        self.all_ratings = all_ratings\n        self.user_history = self._build_user_history()\n        self.predictions = []\n        self.actual_ratings = []\n        self.reset()\n\n    def _build_user_history(self):\n        user_history = {user: [] for user in self.users.keys()}\n        for (user, movie), rating in self.ratings.items():\n            user_history[user].append(movie)\n        return user_history\n\n    def reset(self):\n        self.state = self._get_state_from_history()\n        return self.state\n    \n    def getState(self):\n        return self.state\n\n    def _get_state_from_history(self):\n        user = random.choice(list(self.users.keys()))\n        user_rated_movies = self.user_history.get(user, [])\n        movie = random.choice(user_rated_movies)\n        return (user, movie)\n\n    def step(self, action):\n        user, movie = self.state\n        real_rating = self.ratings.get((user, movie), None)        \n        reward = self._calculate_reward(real_rating, action)\n        self.predictions.append(action)\n        self.actual_ratings.append(real_rating)\n        \n        self.state = self._get_state_from_history()\n        \n        return self.state, reward\n\n    def _calculate_reward(self, real_rating, forecast_rating):\n        diff = abs(real_rating - forecast_rating)\n        if diff == 0:\n            return 4\n        elif diff == 1:\n            return 2\n        elif diff == 2:\n            return 0\n        else:\n            return -2\n        \n    def evaluate_model(self):\n        maen = mean_absolute_error(self.actual_ratings, self.predictions)\n        return maen","user":"anonymous","dateUpdated":"2024-11-14T08:40:49+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731548368573_782381933","id":"20241114-083928_21336174","dateCreated":"2024-11-14T08:39:28+0700","dateStarted":"2024-11-14T08:40:49+0700","dateFinished":"2024-11-14T08:40:49+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1806"},{"text":"%pyspark\nclass MCTable(dict):\n    def __init__(self, default):\n        dict.__init__(self)\n        self.nCounts = {}\n        self.default = default\n      \n    def __getitem__(self, k):\n        if super().__contains__(k):\n            v = super().__getitem__(k)\n            return v / self.nCounts[k]\n        return self.default\n    \n    def __setitem__(self, k, v):\n        if super().__contains__(k):\n            oldV = super().__getitem__(k)\n        else:\n            oldV = 0\n            self.nCounts[k] = 0\n            \n        if isinstance(v, list):\n            super().__setitem__(k, oldV + sum(v))\n            self.nCounts[k] += len(v)\n        else:\n            super().__setitem__(k, oldV + v)\n            self.nCounts[k] += 1","user":"anonymous","dateUpdated":"2024-11-14T08:40:49+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731548377459_654020530","id":"20241114-083937_945111863","dateCreated":"2024-11-14T08:39:37+0700","dateStarted":"2024-11-14T08:40:49+0700","dateFinished":"2024-11-14T08:40:49+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1807"},{"text":"%pyspark\nclass Agent:\n    pass","user":"anonymous","dateUpdated":"2024-11-14T08:40:49+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731548386082_-680643389","id":"20241114-083946_833043734","dateCreated":"2024-11-14T08:39:46+0700","dateStarted":"2024-11-14T08:40:49+0700","dateFinished":"2024-11-14T08:40:49+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1808"},{"text":"%pyspark\nclass MonteClarloControl(Agent):\n    def __init__(self, env, epsilon, maxSteps, defaultQ):\n        self.env = env\n        self.epsilon = epsilon\n        self.maxSteps = maxSteps\n        self.table = MCTable(defaultQ)\n        \n    def recommend(self, n = 1):\n        for i in range(n):\n            steps = []\n            self.env.reset()\n            stepCount = 0\n            totalScore = 0\n            \n            while stepCount < self.maxSteps:\n                s = self.env.getState()\n                a = self.policy()\n                _, score = self.env.step(a)\n                steps.append((s, a, score))\n                totalScore += score\n                stepCount += 1\n            self.improve(steps)\n            if i % 1000 == 0:\n                print(f'Loss: {self.env.evaluate_model()}')\n                \n        return [x[1] for x in steps], totalScore\n    \n    def improve(self, steps):\n        v = self.everyVisit(steps)\n        for s, a in v:\n            self.table[s, a] = v[s, a]\n        \n            \n    def firstVisit(self, steps):\n        v = {}\n        for s, a in set([(x[0], x[1]) for x in steps]):\n            v[s, a] = 0\n            \n            founded = False\n            for curS, curA, score in steps:\n                if (curS, curA) == (s, a): founded = True\n                if not founded: continue\n                v[s, a] += score\n        return v\n        \n    def everyVisit(self, steps):\n        v = {}\n        for i, step in enumerate(steps):\n            s, a = step[0], step[1]\n            if (s, a) not in v:\n                v[s, a] = []\n                \n            total_score  = 0\n            for _, _, score in steps[i:]:\n                total_score  += score\n            v[s, a].append(total_score)\n        return v\n        \n    def policy(self):\n        s = self.env.getState()\n        qs = []\n        actions = self.env.all_ratings\n        for a in actions:\n            qs.append((a, self.table[s, a]))\n\n        t = [x[1] for x in qs]\n        \n        indexes = np.argwhere(t == np.max(t)).flatten()\n        \n        if len(indexes) == len(qs):\n            p = [1/ len(indexes)] * len(indexes)\n        else:\n            p = [(1-self.epsilon)/len(indexes) if i in indexes\\\n            else self.epsilon/(len(qs) - len(indexes)) for i in range(len(qs))]\n            \n        return int(np.random.choice(actions, p=p))","user":"anonymous","dateUpdated":"2024-11-14T08:40:49+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731548392088_1370227119","id":"20241114-083952_1409687135","dateCreated":"2024-11-14T08:39:52+0700","dateStarted":"2024-11-14T08:40:49+0700","dateFinished":"2024-11-14T08:40:49+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1809"},{"text":"%pyspark\nepsilon = 0.2\nmaxSteps = 100\ndefaultQ = 0\nenv = RSEnv(users, movies, ratings)\nagent = MonteClarloControl(env, epsilon, maxSteps, defaultQ)","user":"anonymous","dateUpdated":"2024-11-14T08:41:03+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731548400472_361328061","id":"20241114-084000_2073589939","dateCreated":"2024-11-14T08:40:00+0700","dateStarted":"2024-11-14T08:41:03+0700","dateFinished":"2024-11-14T08:41:03+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1810"},{"text":"%pyspark\nactions, score = agent.recommend(n=30000)","user":"anonymous","dateUpdated":"2024-11-14T08:41:11+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Loss: 1.51\nLoss: 1.5203696303696304\nLoss: 1.5098650674662668\nLoss: 1.503152282572476\nLoss: 1.4954811297175705\nLoss: 1.4910957808438312\nLoss: 1.4852191301449758\nLoss: 1.4812226824739323\nLoss: 1.4772640919885014\nLoss: 1.4729752249750028\nLoss: 1.46991600839916\nLoss: 1.4664639578220162\nLoss: 1.4625397883509708\nLoss: 1.4597638643181294\nLoss: 1.456435968859367\nLoss: 1.453221785214319\nLoss: 1.449809386913318\nLoss: 1.4467754837950708\nLoss: 1.4440881062163213\nLoss: 1.4413172990895216\nLoss: 1.4383225838708065\nLoss: 1.4354011713727917\nLoss: 1.4325117040134538\nLoss: 1.4297095778444415\nLoss: 1.4268622140744136\nLoss: 1.4241398344066238\nLoss: 1.421754932502596\nLoss: 1.4191444761305136\nLoss: 1.4166111924574123\nLoss: 1.4143377814558118\n"}]},"apps":[],"jobName":"paragraph_1731548408870_-1596388117","id":"20241114-084008_1980981629","dateCreated":"2024-11-14T08:40:08+0700","dateStarted":"2024-11-14T08:41:11+0700","dateFinished":"2024-11-14T08:46:18+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1811"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2024-11-14T08:41:11+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1731548471246_-1593063719","id":"20241114-084111_1430691796","dateCreated":"2024-11-14T08:41:11+0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:1812"}],"name":"ReinforcementLearning/rl_dack","id":"2KEAMZF7H","noteParams":{},"noteForms":{},"angularObjects":{"angular:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}